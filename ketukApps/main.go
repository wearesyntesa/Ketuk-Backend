package main

import (
	"fmt"
	"log"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"ketukApps/config"
	_ "ketukApps/docs" // docs is generated by Swag CLI
	"ketukApps/internal/database"
	"ketukApps/internal/handlers"
	"ketukApps/internal/middleware"
	"ketukApps/internal/queue"
	"ketukApps/internal/services"
)

// @title KetukApps API
// @version 1.0
// @description This is the API documentation for KetukApps backend service.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.email support@ketukapp.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8081
// @BasePath /
// @schemes http https

func main() {
	// Load configuration
	cfg := config.Load()

	// Initialize database
	if err := database.Initialize(cfg); err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	defer database.Close()

	db := database.GetDB()

	// Initialize RabbitMQ
	if err := queue.NewRabbitMQConnection(cfg); err != nil {
		log.Fatalf("Failed to initialize RabbitMQ: %v", err)
	}
	defer queue.CloseRabbitMQ()

	// Initialize services
	userService := services.NewUserService(db)
	ticketService := services.NewTicketService(db)
	scheduleService := services.NewScheduleService(db)
	itemsService := services.NewItemService(db)

	// Start the worker with ticket service and schedule service
	go func() {
		if err := queue.SchduleWorker("schedule", ticketService, scheduleService); err != nil {
			log.Fatalf("Failed to start schedule worker: %v", err)
		}
	}()

	// Initialize handlers
	userHandler := handlers.NewUserHandler(userService)
	tickets := handlers.NewTicketHandler(ticketService)
	items := handlers.NewItemHandler(itemsService)

	// Setup Gin router
	router := setupRouter(userHandler, tickets, items)

	// Start server
	address := fmt.Sprintf("%s:%s", cfg.Host, cfg.Port)
	log.Printf("ðŸš€ Server starting on http://%s", address)
	log.Printf("ðŸ“š Swagger Documentation: http://%s/swagger/index.html", address)

	if err := router.Run(address); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}

func setupRouter(userHandler *handlers.UserHandler, ticketHandler *handlers.TicketHandler, itemHandler *handlers.ItemHandler) *gin.Engine {
	// Set Gin mode based on environment
	gin.SetMode(gin.ReleaseMode) // Change to gin.DebugMode for development

	// Create router with default middleware
	router := gin.New()

	// Add custom middleware
	router.Use(middleware.Logger())
	router.Use(middleware.CORS())
	router.Use(middleware.ErrorHandler())
	router.Use(gin.Recovery())

	// Health check endpoint
	router.GET("/health", handlers.HealthCheck)

	// Swagger documentation
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// API routes group
	api := router.Group("/api")
	{
		// Users endpoints
		users := api.Group("/users")
		{
			users.GET("/v1", userHandler.GetAllUsers)
			users.GET("/v1/:id", userHandler.GetUserByID)
			users.POST("/v1", userHandler.CreateUser)
			users.PUT("/v1/:id", userHandler.UpdateUser)
			users.DELETE("/v1/:id", userHandler.DeleteUser)
		}

		tickets := api.Group("/tickets")
		{
			// Ticket endpoints would go here
			tickets.GET("/v1", ticketHandler.GetAllTickets)
			tickets.GET("/v1/:id", ticketHandler.GetTicketByID)
			tickets.POST("/v1", ticketHandler.CreateTicket)
			tickets.PUT("/v1/:id", ticketHandler.UpdateTicket)
			tickets.DELETE("/v1/:id", ticketHandler.DeleteTicket)
			tickets.PATCH("/v1/:id/status", ticketHandler.UpdateTicketStatus)
			tickets.POST("/v1/bulk-status", ticketHandler.BulkUpdateStatus)
		}

		items := api.Group("/items")
		{
			// Item endpoints would go here
			items.GET("/v1", itemHandler.GetAllItems)
			items.GET("/v1/:id", itemHandler.GetItemByID)
			items.POST("/v1", itemHandler.CreateItem)
			items.PUT("/v1/:id", itemHandler.UpdateItem)
			items.DELETE("/v1/:id", itemHandler.DeleteItem)
		}

		ItemsCategory := api.Group("/item-categories")
		{
			// Item Category endpoints would go here
			ItemsCategory.GET("/v1", itemHandler.GetAllItemCategories)
			ItemsCategory.GET("/v1/:id", itemHandler.GetItemCategoryByID)
			ItemsCategory.POST("/v1", itemHandler.CreateItemCategory)
			ItemsCategory.PUT("/v1/:id", itemHandler.UpdateItemCategory)
			ItemsCategory.DELETE("/v1/:id", itemHandler.DeleteItemCategory)
		}
	}

	return router
}
