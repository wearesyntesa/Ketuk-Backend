basePath: /
definitions:
  handlers.BulkUpdateStatusRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
      status:
        type: string
    required:
    - ids
    - status
    type: object
  handlers.UpdateStatusRequest:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  models.APIResponse:
    description: Standard API response format
    properties:
      data: {}
      error:
        example: ""
        type: string
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.CreateTicketRequest:
    description: Request body for creating a new ticket
    properties:
      description:
        example: Need to book conference room for meeting
        type: string
      title:
        example: Room Booking Request
        type: string
      userId:
        example: 1
        type: integer
    required:
    - description
    - title
    - userId
    type: object
  models.CreateUserRequest:
    description: Request body for creating a new user
    properties:
      email:
        example: john.doe@example.com
        type: string
      google_sub:
        example: google-oauth2|123456789
        type: string
      name:
        example: John Doe
        type: string
    required:
    - email
    - google_sub
    - name
    type: object
  models.HealthResponse:
    description: Health check response format
    properties:
      status:
        example: healthy
        type: string
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  models.Item:
    description: Item information
    properties:
      category:
        $ref: '#/definitions/models.ItemCategory'
      categoryId:
        example: 1
        type: integer
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      kondisi:
        example: Baik
        type: string
      name:
        example: PC-001
        type: string
      note:
        example: Kondisi normal, ready to use
        type: string
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      year:
        example: 2023
        type: integer
    type: object
  models.ItemCategory:
    description: Item category information
    properties:
      categoryName:
        example: Komputer
        type: string
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      items:
        items:
          $ref: '#/definitions/models.Item'
        type: array
      quantity:
        example: 10
        type: integer
      specification:
        example: Komputer Desktop Intel Core i5
        type: string
      updatedAt:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.UpdateTicketRequest:
    description: Request body for updating a ticket
    properties:
      description:
        example: Updated description for the booking
        type: string
      title:
        example: Updated Room Booking Request
        type: string
    type: object
  models.UpdateUserRequest:
    description: Request body for updating user information
    properties:
      email:
        example: jane.doe@example.com
        type: string
      name:
        example: Jane Doe
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@ketukapp.com
    name: API Support
  description: This is the API documentation for KetukApps backend service.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: KetukApps API
  version: "1.0"
paths:
  /api/item-categories/v1:
    get:
      description: Get a list of all item categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all item categories
      tags:
      - item-categories
    post:
      consumes:
      - application/json
      description: Create a new item category
      parameters:
      - description: Item category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.ItemCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new item category
      tags:
      - item-categories
  /api/item-categories/v1/{id}:
    delete:
      description: Delete an item category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete item category
      tags:
      - item-categories
    get:
      description: Get an item category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get item category by ID
      tags:
      - item-categories
    put:
      consumes:
      - application/json
      description: Update item category information by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category data
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update item category
      tags:
      - item-categories
  /api/items/v1:
    get:
      description: Get a list of all items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create a new item
      parameters:
      - description: Item data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.Item'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new item
      tags:
      - items
  /api/items/v1/{id}:
    delete:
      description: Delete an item by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete item
      tags:
      - items
    get:
      description: Get an item by its ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get item by ID
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update item information by ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated item data
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update item
      tags:
      - items
  /api/items/v1/category/{category_id}:
    get:
      description: Get all items for a specific category
      parameters:
      - description: Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get items by category ID
      tags:
      - items
  /api/tickets/v1:
    get:
      description: Get a list of all tickets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all tickets
      tags:
      - tickets
    post:
      consumes:
      - application/json
      description: Create a new ticket for a user
      parameters:
      - description: Ticket data
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/models.CreateTicketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new ticket
      tags:
      - tickets
  /api/tickets/v1/{id}:
    delete:
      description: Delete a ticket by ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete ticket
      tags:
      - tickets
    get:
      description: Get a ticket by its ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get ticket by ID
      tags:
      - tickets
    put:
      consumes:
      - application/json
      description: Update ticket information by ID
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated ticket data
        in: body
        name: ticket
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update ticket
      tags:
      - tickets
  /api/tickets/v1/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of a ticket
      parameters:
      - description: Ticket ID
        in: path
        name: id
        required: true
        type: integer
      - description: New status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update ticket status
      tags:
      - tickets
  /api/tickets/v1/bulk-status:
    post:
      consumes:
      - application/json
      description: Update status for multiple tickets
      parameters:
      - description: Bulk update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.BulkUpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Bulk update ticket status
      tags:
      - tickets
  /api/users/v1:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with name and email
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/v1/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Delete user
      tags:
      - users
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Update user
      tags:
      - users
  /health:
    get:
      description: Check if the API is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HealthResponse'
      summary: Health check
      tags:
      - health
schemes:
- http
- https
swagger: "2.0"
